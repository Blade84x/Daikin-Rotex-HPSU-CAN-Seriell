name: Compile ESPHome Binary On Demand

on:
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Check for required secrets
        run: |
          if [ -z "${{ secrets.API_ENCRYPTION_KEY }}" ]; then
            echo "Error: API_ENCRYPTION_KEY secret is not set" >&2
            exit 1
          fi
          if [ -z "${{ secrets.OTA_PASSWORD }}" ]; then
            echo "Error: OTA_PASSWORD secret is not set" >&2
            exit 1
          fi
          if [ -z "${{ secrets.WIFI_SSID }}" ]; then
            echo "Error: WIFI_SSID secret is not set" >&2
            exit 1
          fi
          if [ -z "${{ secrets.WIFI_PASSWORD }}" ]; then
            echo "Error: WIFI_PASSWORD secret is not set" >&2
            exit 1
          fi
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.x'

      - name: Set environment variables 
        run: | 
          echo "API_ENCRYPTION_KEY=${{ secrets.API_ENCRYPTION_KEY }}" >> $GITHUB_ENV
          echo "OTA_PASSWORD=${{ secrets.OTA_PASSWORD }}" >> $GITHUB_ENV
          echo "WIFI_SSID=${{ secrets.WIFI_SSID }}" >> $GITHUB_ENV
          echo "WIFI_PASSWORD=${{ secrets.WIFI_PASSWORD }}" >> $GITHUB_ENV
          
      - name: Install ESPHome and cells
        run: |
          python3 -m pip install esphome
          wget https://files.pythonhosted.org/packages/18/82/14819c1cc67c67e909abdbd9824eb756adccd47a1dee1c846f7300716646/cels-0.3.1.tar.gz
          python3 -m pip install cels-0.3.1.tar.gz

      - name: Compile ESPHome binary
        run: |
          cp examples/full.yaml .
          cp .github/workflows/resources/secrets.yaml .          
          cp .github/workflows/resources/extract_external_components_block.py .

          # patch full.yaml to load external components from dev
          if [ "${{ github.ref }}" == "refs/heads/dev" ]; then 
            echo "This step runs only on the dev branch"            
            cp .github/workflows/resources/external_components_dev.yaml .
            # make yaml pyyaml conform for cels with sed
            sed -i 's/!/?/g' full.yaml 
            cels patch full.yaml external_components_dev.yaml > full_patched.yaml
            cat full_patched.yaml > full.yaml
            # make yaml esphome conform
            sed -i 's/?/!/g' full.yaml 
          else 
            echo "This step does not run on the dev branch" 
          fi

          # print path used for external components
          echo "The following external components will be used for compilation: "
          python extract_external_components_block.py

          # compile eshphome
          esphome compile full.yaml

          # rename file
          mv .esphome/build/rotex/.pioenvs/rotex/firmware.factory.bin .esphome/build/rotex/.pioenvs/rotex/rotex.factory-gpios-tx05-rx06.bin  

      - name: Archive compiled binary
        uses: actions/upload-artifact@v4
        with:
          name: compiled-binary
          path: .esphome/build/rotex/.pioenvs/rotex/rotex.factory-gpios-tx05-rx06.bin
